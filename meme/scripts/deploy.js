const { ethers } = require("hardhat");

/**
 * SHIBÈ£éÊ†ºMeme‰ª£Â∏ÅÈÉ®ÁΩ≤ËÑöÊú¨
 * ÈÉ®ÁΩ≤ÂêàÁ∫¶Âπ∂ÈÖçÁΩÆÂàùÂßãÂèÇÊï∞
 */

async function main() {
  console.log("üöÄ ÂºÄÂßãÈÉ®ÁΩ≤SHIBÈ£éÊ†ºMeme‰ª£Â∏ÅÂêàÁ∫¶...");
  
  // Ëé∑ÂèñÈÉ®ÁΩ≤ËÄÖË¥¶Êà∑
  const [deployer] = await ethers.getSigners();
  console.log("üìù ÈÉ®ÁΩ≤ËÄÖÂú∞ÂùÄ:", deployer.address);
  console.log("üí∞ ÈÉ®ÁΩ≤ËÄÖ‰ΩôÈ¢ù:", ethers.utils.formatEther(await deployer.getBalance()), "ETH");

  // ÈÉ®ÁΩ≤ÂèÇÊï∞ÈÖçÁΩÆ
  const tokenConfig = {
    name: "SHIB Style Meme Token",
    symbol: "SSMT",
    initialSupply: ethers.utils.parseEther("1000000000"), // 10‰∫ø‰ª£Â∏Å
    treasuryWallet: deployer.address, // ‰ΩøÁî®ÈÉ®ÁΩ≤ËÄÖÂú∞ÂùÄ‰Ωú‰∏∫‰∏¥Êó∂ÂõΩÂ∫ì
    taxRate: 5, // ÂàùÂßãÁ®éÁéá5%
    liquidityShare: 40, // ÊµÅÂä®ÊÄßÊ±†ÂàÜÈÖç40%
    burnShare: 30, // ÈîÄÊØÅÂàÜÈÖç30%
    treasuryShare: 30, // ÂõΩÂ∫ìÂàÜÈÖç30%
    maxTransaction: ethers.utils.parseEther("1000000"), // ÊúÄÂ§ß‰∫§ÊòìÈáè100‰∏á
    maxWallet: ethers.utils.parseEther("5000000"), // ÊúÄÂ§ßÈí±ÂåÖ‰ΩôÈ¢ù500‰∏á
    cooldown: 300 // ÂÜ∑Âç¥Êó∂Èó¥300Áßí
  };

  console.log("\nüìã ÈÉ®ÁΩ≤ÈÖçÁΩÆ:");
  console.log("‰ª£Â∏ÅÂêçÁß∞:", tokenConfig.name);
  console.log("‰ª£Â∏ÅÁ¨¶Âè∑:", tokenConfig.symbol);
  console.log("ÂàùÂßã‰æõÂ∫îÈáè:", ethers.utils.formatEther(tokenConfig.initialSupply), "SSMT");
  console.log("ÂõΩÂ∫ìÂú∞ÂùÄ:", tokenConfig.treasuryWallet);
  console.log("ÂàùÂßãÁ®éÁéá:", tokenConfig.taxRate, "%");

  // ÈÉ®ÁΩ≤ÂêàÁ∫¶
  console.log("\n‚è≥ Ê≠£Âú®ÈÉ®ÁΩ≤ÂêàÁ∫¶...");
  const SHIBToken = await ethers.getContractFactory("SHIBToken");
  const token = await SHIBToken.deploy(
    tokenConfig.name,
    tokenConfig.symbol,
    tokenConfig.initialSupply,
    tokenConfig.treasuryWallet
  );

  console.log("‚è≥ Á≠âÂæÖÂêàÁ∫¶ÈÉ®ÁΩ≤Á°ÆËÆ§...");
  await token.deployed();
  
  console.log("‚úÖ ÂêàÁ∫¶ÈÉ®ÁΩ≤ÊàêÂäü!");
  console.log("üìÑ ÂêàÁ∫¶Âú∞ÂùÄ:", token.address);
  console.log("üîó ‰∫§ÊòìÂìàÂ∏å:", token.deployTransaction.hash);

  // ÈÖçÁΩÆÂêàÁ∫¶ÂèÇÊï∞
  console.log("\n‚öôÔ∏è Ê≠£Âú®ÈÖçÁΩÆÂêàÁ∫¶ÂèÇÊï∞...");
  
  // ËÆæÁΩÆÁ®éÊî∂ÂàÜÈÖçÊØî‰æã
  console.log("üìä ËÆæÁΩÆÁ®éÊî∂ÂàÜÈÖçÊØî‰æã...");
  const taxTx = await token.setTaxDistribution(
    tokenConfig.liquidityShare,
    tokenConfig.burnShare,
    tokenConfig.treasuryShare
  );
  await taxTx.wait();
  console.log("‚úÖ Á®éÊî∂ÂàÜÈÖçËÆæÁΩÆÂÆåÊàê");

  // ËÆæÁΩÆ‰∫§ÊòìÈôêÂà∂
  console.log("üõ°Ô∏è ËÆæÁΩÆ‰∫§ÊòìÈôêÂà∂...");
  const limitTx = await token.updateTradingRestrictions(
    tokenConfig.maxTransaction,
    tokenConfig.maxWallet,
    tokenConfig.cooldown
  );
  await limitTx.wait();
  console.log("‚úÖ ‰∫§ÊòìÈôêÂà∂ËÆæÁΩÆÂÆåÊàê");

  // È™åËØÅÈÖçÁΩÆ
  console.log("\nüîç È™åËØÅÂêàÁ∫¶ÈÖçÁΩÆ...");
  
  const actualTaxRate = await token.taxRate();
  const actualLiquidityShare = await token.liquidityPoolShare();
  const actualMaxTx = await token.maxTransactionAmount();
  
  console.log("üìä ÂÆûÈôÖÁ®éÁéá:", actualTaxRate.toString(), "%");
  console.log("üíß ÊµÅÂä®ÊÄßÂàÜÈÖç:", actualLiquidityShare.toString(), "%");
  console.log("üìà ÊúÄÂ§ß‰∫§ÊòìÈáè:", ethers.utils.formatEther(actualMaxTx), "SSMT");

  // ‰øùÂ≠òÈÉ®ÁΩ≤‰ø°ÊÅØÂà∞Êñá‰ª∂
  const deploymentInfo = {
    contractAddress: token.address,
    deployer: deployer.address,
    network: (await ethers.provider.getNetwork()).name,
    deploymentTime: new Date().toISOString(),
    config: tokenConfig
  };

  console.log("\nüìÅ ÈÉ®ÁΩ≤‰ø°ÊÅØÂ∑≤‰øùÂ≠ò");
  console.log("üåê ÁΩëÁªú:", deploymentInfo.network);
  console.log("‚è∞ ÈÉ®ÁΩ≤Êó∂Èó¥:", deploymentInfo.deploymentTime);

  // ËæìÂá∫‰ΩøÁî®ËØ¥Êòé
  console.log("\nüéØ ÈÉ®ÁΩ≤ÂÆåÊàêÔºÅ‰∏ã‰∏ÄÊ≠•Êìç‰Ωú:");
  console.log("1. Â∞ÜÊµÅÂä®ÊÄßÊ±†Âú∞ÂùÄËÆæÁΩÆ‰∏∫ÂêàÁ∫¶ÁöÑÊµÅÂä®ÊÄßÊ±†");
  console.log("2. Â∞ÜÈáçË¶ÅÂú∞ÂùÄÔºàÂ¶ÇDEXË∑ØÁî±Âô®ÔºâÊéíÈô§Âú®Á®éÊî∂ÂíåÈôêÂà∂‰πãÂ§ñ");
  console.log("3. ÊµãËØï‰ª£Â∏ÅËΩ¨Ë¥¶ÂíåÁ®éÊî∂ÂäüËÉΩ");
  console.log("4. ÈÖçÁΩÆÂâçÁ´ØÂ∫îÁî®ÈõÜÊàê");

  return deploymentInfo;
}

// ÈîôËØØÂ§ÑÁêÜ
main()
  .then(() => process.exit(0))
  .catch((error) => {
    console.error("‚ùå ÈÉ®ÁΩ≤Â§±Ë¥•:", error);
    process.exit(1);
  });

module.exports = { main };